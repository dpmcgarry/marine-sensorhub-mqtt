version: 2.1
orbs:
  aws-cli: circleci/aws-cli@5.1.0
jobs:
  build:
    environment:
      AWS_REGION: us-east-1
      PACKAGE_BASE_VERSION: 1.0.
    docker:
      - image: cimg/go:1.23.1
    resource_class: dizon/onprem
    steps:
      - checkout
      - run:
          name: List Home
          command: ls -l -R ~
      - aws-cli/setup:
          profile_name: default
          region: ${AWS_REGION}
          role_arn: ${AWS_ROLE_ARN}
      - restore_cache:
          key: go-mod-{{ checksum "go.sum" }}
      - run:
          name: Download Go modules
          command: go mod download
      - run:
          name: Print go mod help instructions
          command: "echo \"go mod download will fail if you have private repositories \nOne way to fix this for private go modules that are hosted in github:\n  1. Add a GITHUB_TOKEN and GITHUB_USER to an org context. Please refer to https://circleci.com/docs/contexts/ for more informaiton on how to use contexts.\n  2. Add a .circleci/config.yml to your repository or use this config.yml as a starting template\n  3. Configure the jobs to use the newly created context which includes GITHUB_TOKEN and GITHUB_USER  \n  4. Before downloading the modules you will need to add a step to execute \\\"go env -w GOPRIVATE=github.com/<OrgNameHere>\\\". \n\tThis allows go mod to install private repos under OrgNameHere.\n  5. You will also need to run \\\"git config --global url.\\\"https://$GITHUB_USER:$GITHUB_TOKEN@github.com/<OrgNameHere>/\\\".insteadOf \\\"https://github.com/<OrgNameHere>/\\\"\\\"\n  6. Finally include the \\\"go mod download\\\" it should be able to fetch your private libraries now. \nFor gitlab private go modules, follow the same instructions as above but include your GITLAB_TOKEN and GITLAB_USER.\nThen use gitlab.com instead of github.com in steps 4 and 5.\nSee https://go.dev/ref/mod#private-modules for more details.\""
          when: on_fail
      - save_cache:
          key: go-mod-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - run:
          name: Create the ~/build directory if it doesn't exist
          command: mkdir -p ~/build
      - run:
          name: Create the ~/build/amd64 directory if it doesn't exist
          command: mkdir -p ~/build/amd64
      - run:
          name: Build amd64 executable
          command: GOOS=linux GOARCH=amd64 go build -o ~/build/amd64 ./...
      - run:
          name: Create the ~/build/arm64 directory if it doesn't exist
          command: mkdir -p ~/build/arm64
      - run:
          name: Build arm64 executable
          command: GOOS=linux GOARCH=arm64 go build -o ~/build/arm64 ./...
      - run:
          name: List Build Output
          command: ls -l -R ~/build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Print Package Version
          command: echo ${PACKAGE_BASE_VERSION}${CIRCLE_BUILD_NUM}
      - run:
          name: Build amd64 deb package
          command: |
            sed -e "s/%VER%/${PACKAGE_BASE_VERSION}${CIRCLE_BUILD_NUM}/g" ~/project/deb/control.amd64 | tee ~/project/deb/mqtt-keepalive/DEBIAN/control
            cat ~/project/deb/mqtt-keepalive/DEBIAN/control
            cp ~/build/amd64/mqtt-keepalive ~/project/deb/mqtt-keepalive/usr/local/bin/mqtt-keepalive
            cd ~/project/deb
            rm ./mqtt-keepalive/DEBIAN/.gitkeep
            rm ./mqtt-keepalive/usr/local/bin/.gitkeep
            dpkg-deb --build mqtt-keepalive
            ls
            cp mqtt-keepalive.deb ~/artifacts/mqtt-keepalive_${PACKAGE_BASE_VERSION}${CIRCLE_BUILD_NUM}_amd64.deb
      - run:
          name: Build arm64 deb package
          command: |
            sed -e "s/%VER%/${PACKAGE_BASE_VERSION}${CIRCLE_BUILD_NUM}/g" ~/project/deb/control.arm64 | tee ~/project/deb/mqtt-keepalive/DEBIAN/control
            cat ~/project/deb/mqtt-keepalive/DEBIAN/control
            cp ~/build/arm64/mqtt-keepalive ~/project/deb/mqtt-keepalive/usr/local/bin/mqtt-keepalive
            cd ~/project/deb
            dpkg-deb --build mqtt-keepalive
            ls
            cp mqtt-keepalive.deb ~/artifacts/route53-ddns_${PACKAGE_BASE_VERSION}${CIRCLE_BUILD_NUM}_arm64.deb
      - run:
          name: List Artifacts
          command: ls -l -R ~/artifacts
      - run:
          Name: Upload Artifacts to S3
          command: aws s3 cp ~/artifacts/ s3://${ARTIFACT_BUCKET}/deb/ --recursive      
  deploy:
    docker:
      - image: cimg/base:current-22.04
    resource_class: dizon/onprem
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: Update APT via SSH
          command: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
            ssh $SSH_USER@$SSH_HOST "sudo /opt/repo-sync.sh"
workflows:
  build-and-deploy-RPM:
    jobs:
      - build:
          context:
            - aws-constants
      - deploy:
          context:
            - apt-repo
          requires:
            - build
